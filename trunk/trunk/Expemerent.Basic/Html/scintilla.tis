
// Scintilla wrapper/behavior

type Scintilla: Behavior
{
  var lexers = {};
  function attached()
  {
    this.changed = false;
    this.filePath = "";
    this.fileType = "";
    this.fileExt = "";
    var lx = this.attributes#lexer || "hypertext"; 
    this.setLexer(lx);
  }
  /*
    Three generic interface functions that allow to send messages to the Scintilla WinProc:
      this.call_ii( msg:int, wparam:int, lparam:int) : int
      this.call_is( msg:int, wparam:int, lparam:string) : int
      this.call_ss( msg:int, wparam:string, lparam:string) : int
    Paramaters of these functions are passed direcly to 
      ScintillaWinProc(hwnd,UINT msg, WPARAM wParam, LPARAM lParam)
    As Scintilla API is exposed by set of meesages then pretty much all functionality is
    available through these two methods.
  */
  
  function call_ii( code, wParam = 0, lParam = 0 ) { return this.xcall(#mII_I, code, wParam, lParam); }
  function call_is( code, wParam, lParamString ) { return this.xcall(#mIS_I, code, wParam, lParamString); }
  function call_ss( code, wParamString, lParamString ) { return this.xcall(#mSS_I, code, wParamString, lParamString); }
  
  property caretPosition(v)   {  get return this.call_ii( 2008 /*SCI_GETCURRENTPOS*/, 0,0); set this.call_ii( 2141 /*SCI_SETCURRENTPOS*/, v); return v;}
  property anchorPosition(v)  {  get return this.call_ii( 2009 /*SCI_GETANCHOR*/, 0,0); set this.call_ii( 2026 /*SCI_SETANCHOR*/, v); return v; }
  function charAt(pos)        {  return this.call_ii( 2007 /*SCI_GETCHARAT*/, pos); }
  property textLength(v)      {  get return this.call_ii( 2006 /*SCI_GETLENGTH*/); }
  property value(v)           {  get return this.xcall("getText",0,-1); set this.call_is(2181 /*SCI_SETTEXT*/,0,v); }  
  property selection(v)       {  get return this.xcall("getText", this.anchorPosition, this.caretPosition ); 
                                 set this.call_is(2170 /*SCI_REPLACESEL*/,0,v); }  
  property hasSelection(v)    {  return this.caretPosition != this.anchorPosition; }

  // set lexer and corresonded styles from lexers collection   
  function setLexer(lexerName)
  {
    var def = Scintilla.lexers[lexerName];
    if( def ) 
    {
      lexerName = def.base || lexerName;
      this.call_is( 4006 /*SCI_SETLEXERLANGUAGE*/, 0, lexerName);
      this.loadStyleDef(def);
      this.fileType = lexerName;
    }
    this.setupTabs(TABS_USE_TAB, TABS_WIDTH);
    this.setupMargins(true, #folding-classic);
  }
  
  function newFile()
  {
    this.call_ii( 2004 /*SCI_CLEARALL*/, 0, 0);
    this.call_ii( 2175 /*SCI_EMPTYUNDOBUFFER*/, 0,0);
    this.call_ii( 2014 /*SCI_SETSAVEPOINT*/, 0,0);
    this.changed = false;
    this.filePath = "";
    this.fileType = "";
    this.fileExt = "";
  }
  
  function openFile(path = "")
  {
    if(!path)
    {
      var filter = "";
      var definedLX = this.attributes#lexer;
      if( definedLX )
        filter = Scintilla.lexers[definedLX].files.filter;
      else // otherwise build full list from filters of all registered lexers
        for( var lxn in Scintilla.lexers )
          filter += Scintilla.lexers[lxn].files.filter;
      path = view.selectFile(#open, filter);
      if( !path ) return false;
    }
    
    var ext = "";
    var dotPos = path.lastIndexOf(".");
    if( dotPos >= 0 ) 
      ext = path.substr(dotPos + 1);
    
    if( !ext )  
      throw "wrong file name:" + path;
      
    this.newFile(); // clear view
    
    // load lexer for the file
    for( var lxn in Scintilla.lexers )
    {
      var lx = Scintilla.lexers[lxn];
      this.fileType = lxn;
      for(var ex in lx.files.ext)
       if( ex == ext )
       {
          this.call_is( 4006 /*SCI_SETLEXERLANGUAGE*/, 0, lx.base || lxn );
          this.loadStyleDef(lx);
       }
    }
    // load file itself
    if(this.xcall(#loadFile, path))
    {
      this.filePath = path;
      this.fileExt = ext;
      return true;
    }
    return false;
  }
  
  function saveFile()
  {
    if(!this.filePath)
      return this.saveFileAs();
    else 
      return this.xcall(#saveFile, this.filePath) != 0;
  }
  
  function saveFileAs()
  {
    var filter = "";
    var ext = "";
    var definedLX = this.attributes#lexer;
    if( definedLX )
    {
      var lx = Scintilla.lexers[definedLX];
      filter = lx.files.filter;
      ext = lx.files.ext[0];
    }
    else // otherwise build full list from filters of all registered lexers
      for( var lxn in Scintilla.lexers )
        filter += Scintilla.lexers[lxn].files.filter;
    path = view.selectFile(#save, filter, ext);
    if( !path ) return false;
    
    if(this.xcall(#saveFile, path) != 0)
    {
      this.filePath = path;
      return true;
    }
    return false;
  }   
  
  //+ User events. 
  //  Overridable methods.
  function onFileOpenRequest() {} // ctrl+'O' pressed
  function onFileNewRequest() {}  // ctrl+'N' pressed
  function onFilePrintRequest() {}  // ctrl+'P' pressed
  function onShortcutKey(keyCode, shiftPressed, ctrlPressed, altPressed) {} // return true if handled
  function onStatusChanged(changed) {} // changed == true - document is getting state "changed", false - otherwise
  function onCharAdded( charCode ) {}  
  function onDoubleClick( lineNo, position /*from doc start*/, shiftPressed, ctrlPressed, altPressed ) {}  
  function onUpdateUI() {} // something was changed, time to update toolbars, etc.
  function onSearchRequest() {}
  //- User events.
    
}

include "schemas/html.tis";
include "schemas/tiscript.tis";

// Internal methods that not supposed to be called directly.

function Scintilla.gotoToBracket()
{
  var pos = this.call_ii(2353/*SCI_BRACEMATCH*/, this.caretPosition );
  if( pos >= 0 )
    this.caretPosition = this.anchorPosition = pos;
  return true; // consumed
}

Scintilla.shortcuts = 
[
  { code: '[', ctrl:true, shift:false, alt:false, handler: #gotoToBracket }, // ctrl+'[' - moves caret to closing bracket (a la VS)
  { code: 'S', ctrl:true, shift:false, alt:false, handler: #saveFile },
  { code: 'S', ctrl:true, shift:true,  alt:false, handler: #saveFileAs },
  { code: 'O', ctrl:true, shift:false, alt:false, handler: #onFileOpenRequest },
  { code: 'N', ctrl:true, shift:false, alt:false, handler: #onFileNewRequest },
  { code: 'P', ctrl:true, shift:false, alt:false, handler: #onFilePrintRequest },
  { code: 'F', ctrl:true, shift:false, alt:false, handler: #onSearchRequest },
];


function Scintilla.prepareContextMenu(menu, position)
{
  var sel = this.hasSelection;
  var mod  = !this.isReadOnly;
  function enable( itemSelector, onOff )
  {
    var item = menu.select(itemSelector);
    if(item) item.enabled = onOff; 
  }
  enable("[command='behavior:scintilla:undo']", this.call_ii(2174/*SCI_CANUNDO*/) != 0 );
  enable("[command='behavior:scintilla:cut']", sel && mod);
  enable("[command='behavior:scintilla:copy']", sel);
  enable("[command='behavior:scintilla:paste']",  this.call_ii(2173/*SCI_CANPASTE*/) != 0 );
  enable("[command='behavior:scintilla:selectall']",  this.textLength != 0 );
  // setup menu click handler
  var me = this;
  this.onMenuItemClick = function(item) 
  {
    switch(item.@#command)  // short form of item.attributes["command"]
    {
      case "behavior:scintilla:undo": me.call_ii(2176/*SCI_UNDO*/); break;
      case "behavior:scintilla:cut":  me.call_ii(2177/*SCI_CUT*/); break;
      case "behavior:scintilla:copy": me.call_ii(2178/*SCI_COPY*/); break;
      case "behavior:scintilla:paste": me.call_ii(2179/*SCI_PASTE*/); break;
      case "behavior:scintilla:selectall": me.call_ii(2013/*SCI_SELECTALL*/); break;
    }
    return true;
  }
}

function Scintilla.onControlEvent(evt)
{
  if(evt.type == Event.MENU_ITEM_CLICK && typeof this.onMenuItemClick == #function)  
    return this.onMenuItemClick( evt.target );
}

//+ Lexer and styles support 
  
function Scintilla.setStyle(styleDef)
{
  var id = styleDef.id || 0;
  var t ;
  t = styleDef.fore;      if( t != undefined ) this.call_ii( 2051 /*SCI_STYLESETFORE*/,   id, t);
  t = styleDef.back;      if( t != undefined ) this.call_ii( 2052 /*SCI_STYLESETBACK*/,   id, t);
  t = styleDef.bold;      if( t != undefined ) this.call_ii( 2053 /*SCI_STYLESETBOLD*/,   id, t?1:0);
  t = styleDef.italic;    if( t != undefined ) this.call_ii( 2054 /*SCI_STYLESETITALIC*/, id, t?1:0);
  t = styleDef.size;      if( t != undefined ) this.call_ii( 2055 /*SCI_STYLESETSIZE*/,   id, t);
  t = styleDef.font;      if( t != undefined ) this.call_is( 2056 /*SCI_STYLESETFONT*/,   id, t); 
  t = styleDef.wholeLine; if( t != undefined ) this.call_ii( 2057 /*SCI_STYLESETEOLFILLED*/,   id, t?1:0);
  t = styleDef.underline; if( t != undefined ) this.call_ii( 2059 /*SCI_STYLESETUNDERLINE*/,   id, t?1:0);
}
function Scintilla.setKeywords(id, sKeywords) {  this.call_is( 4005 /*SCI_SETKEYWORDS*/, id, sKeywords); }
function Scintilla.setStyleBits(n)            {  this.call_ii( 2090 /*SCI_SETSTYLEBITS*/, n, 0); }
function Scintilla.setDefaultStyle(sd)        {  sd.id = 32; /*STYLE_DEFAULT*/; this.setStyle(sd); } 
function Scintilla.initAllStyles()            {  this.call_ii( 2050 /*SCI_STYLECLEARALL*/, 0, 0); } // Copies global style to all others  
function Scintilla.setProperty(propName, propValue)
{
  this.call_ss( 4004 /*SCI_SETPROPERTY*/, propName, propValue.toString());
}
  
function Scintilla.loadStyleDef(sd)
{
  this.setStyleBits(0x7);
  
  this.setDefaultStyle(defaultStyle);
  this.initAllStyles();
  
  for(var pn in sd.properties)   this.setProperty(pn,sd.properties[pn]);

  for( var kwgn in sd.keywords ) { var kwg = sd.keywords[kwgn];  this.setKeywords(kwg.id, kwg.list);  }
  for( var stn in sd.styles )    { var st = sd.styles[stn];      this.setStyle(st);  }
  
  this.call_ii(4003/*SCI_COLOURISE*/, 0, this.textLength);
}
  
function Scintilla.setupTabs(useTab, tabWidth)
{
  this.call_ii( 2036 /*SCI_SETTABWIDTH*/,tabWidth);
  this.call_ii( 2124 /*SCI_SETUSETABS*/,useTab?1:0);
}
  
function Scintilla.setupMargins(lineNumbers, foldingType)
{
  var n = 0;
  
  const SCI_SETMARGINTYPEN = 2240;
  const SCI_GETMARGINTYPEN = 2241;
  const SCI_SETMARGINWIDTHN = 2242;
  const SCI_GETMARGINWIDTHN = 2243;
  const SCI_SETMARGINMASKN = 2244;
  const SCI_GETMARGINMASKN = 2245;
  const SCI_SETMARGINSENSITIVEN = 2246;
  const SCI_GETMARGINSENSITIVEN = 2247;
  
  const SCI_SETFOLDFLAGS = 2233;
  const SCI_SETMARGINSENSITIVEN = 2246;
  const SCI_GETMARGINSENSITIVEN = 2247;  
  
  const SC_MARGIN_SYMBOL = 0;
  const SC_MARGIN_NUMBER = 1;
  const SC_MARGIN_BACK = 2;
  const SC_MARGIN_FORE = 3;
  const SC_MASK_FOLDERS = 0xFE000000;
    
  if(lineNumbers)
  {
    this.call_ii( SCI_SETMARGINTYPEN, 0, SC_MARGIN_NUMBER);
    this.call_ii( SCI_SETMARGINWIDTHN, 0, 30);
  }
  else
  {
    this.call_ii( SCI_SETMARGINTYPEN, 0, 0);
    this.call_ii( SCI_SETMARGINWIDTHN, 0, 0);
  }
  
  if(foldingType)
  {
    this.call_ii( SCI_SETMARGINTYPEN, 1, SC_MARGIN_SYMBOL);
    this.call_ii( SCI_SETMARGINMASKN, 1, SC_MASK_FOLDERS);
    this.call_ii( SCI_SETMARGINWIDTHN, 1, 12);
    this.call_ii( SCI_SETMARGINSENSITIVEN, 1, 1);
  }
  else 
    return;

  var me = this;
  function defineMarker(marker, markerType, fore, back)
  {
    me.call_ii( 2040 /*SCI_MARKERDEFINE*/, marker, markerType);
    me.call_ii( 2041 /*SCI_MARKERSETFORE*/, marker, fore);
    me.call_ii( 2042 /*SCI_MARKERSETBACK*/, marker, back);
  }
 
  const SC_MARKNUM_FOLDEREND = 25;
  const SC_MARKNUM_FOLDEROPENMID = 26;
  const SC_MARKNUM_FOLDERMIDTAIL = 27;
  const SC_MARKNUM_FOLDERTAIL = 28;
  const SC_MARKNUM_FOLDERSUB = 29;
  const SC_MARKNUM_FOLDER = 30;
  const SC_MARKNUM_FOLDEROPEN = 31;

  const SC_MARK_CIRCLE = 0;
  const SC_MARK_ROUNDRECT = 1;
  const SC_MARK_ARROW = 2;
  const SC_MARK_SMALLRECT = 3;
  const SC_MARK_SHORTARROW = 4;
  const SC_MARK_EMPTY = 5;
  const SC_MARK_ARROWDOWN = 6;
  const SC_MARK_MINUS = 7;
  const SC_MARK_PLUS = 8;
  const SC_MARK_VLINE = 9;
  const SC_MARK_LCORNER = 10;
  const SC_MARK_TCORNER = 11;
  const SC_MARK_BOXPLUS = 12;
  const SC_MARK_BOXPLUSCONNECTED = 13;
  const SC_MARK_BOXMINUS = 14;
  const SC_MARK_BOXMINUSCONNECTED = 15;
  const SC_MARK_LCORNERCURVE = 16;
  const SC_MARK_TCORNERCURVE = 17;
  const SC_MARK_CIRCLEPLUS = 18;
  const SC_MARK_CIRCLEPLUSCONNECTED = 19;
  const SC_MARK_CIRCLEMINUS = 20;
  const SC_MARK_CIRCLEMINUSCONNECTED = 21;
  const SC_MARK_BACKGROUND = 22;
  const SC_MARK_DOTDOTDOT = 23;
  const SC_MARK_ARROWS = 24;
  const SC_MARK_PIXMAP = 25;
  const SC_MARK_FULLRECT = 26;
  const SC_MARK_LEFTRECT = 27;
  const SC_MARK_CHARACTER = 10000;
  
 	switch (foldingType)
	{
    case #folding-classic:
      defineMarker(SC_MARKNUM_FOLDEROPEN, SC_MARK_BOXMINUS, RGB(0xff, 0xff, 0xff), RGB(0x80, 0x80, 0x80));
      defineMarker(SC_MARKNUM_FOLDER, SC_MARK_BOXPLUS, RGB(0xff, 0xff, 0xff), RGB(0x80, 0x80, 0x80));
      defineMarker(SC_MARKNUM_FOLDERSUB, SC_MARK_VLINE, RGB(0xff, 0xff, 0xff), RGB(0x80, 0x80, 0x80));
      defineMarker(SC_MARKNUM_FOLDERTAIL, SC_MARK_LCORNER, RGB(0xff, 0xff, 0xff), RGB(0x80, 0x80, 0x80));
      defineMarker(SC_MARKNUM_FOLDEREND, SC_MARK_BOXPLUSCONNECTED, RGB(0xff, 0xff, 0xff), RGB(0x80, 0x80, 0x80));
      defineMarker(SC_MARKNUM_FOLDEROPENMID, SC_MARK_BOXMINUSCONNECTED, RGB(0xff, 0xff, 0xff), RGB(0x80, 0x80, 0x80));
      defineMarker(SC_MARKNUM_FOLDERMIDTAIL, SC_MARK_TCORNER, RGB(0xff, 0xff, 0xff), RGB(0x80, 0x80, 0x80));
      break;
    case #folding-rounded:
 			defineMarker(SC_MARKNUM_FOLDEROPEN, SC_MARK_CIRCLEMINUS, RGB(0xff, 0xff, 0xff), RGB(0x40, 0x40, 0x40));
			defineMarker(SC_MARKNUM_FOLDER, SC_MARK_CIRCLEPLUS, RGB(0xff, 0xff, 0xff), RGB(0x40, 0x40, 0x40));
			defineMarker(SC_MARKNUM_FOLDERSUB, SC_MARK_VLINE, RGB(0xff, 0xff, 0xff), RGB(0x40, 0x40, 0x40));
			defineMarker(SC_MARKNUM_FOLDERTAIL, SC_MARK_LCORNERCURVE, RGB(0xff, 0xff, 0xff), RGB(0x40, 0x40, 0x40));
			defineMarker(SC_MARKNUM_FOLDEREND, SC_MARK_CIRCLEPLUSCONNECTED, RGB(0xff, 0xff, 0xff), RGB(0x40, 0x40, 0x40));
			defineMarker(SC_MARKNUM_FOLDEROPENMID, SC_MARK_CIRCLEMINUSCONNECTED, RGB(0xff, 0xff, 0xff), RGB(0x40, 0x40, 0x40));
			defineMarker(SC_MARKNUM_FOLDERMIDTAIL, SC_MARK_TCORNERCURVE, RGB(0xff, 0xff, 0xff), RGB(0x40, 0x40, 0x40));
      break;
    case #folding-plus:      
			defineMarker(SC_MARKNUM_FOLDEROPEN, SC_MARK_MINUS, RGB(0xff, 0xff, 0xff), RGB(0, 0, 0));
			defineMarker(SC_MARKNUM_FOLDER, SC_MARK_PLUS, RGB(0xff, 0xff, 0xff), RGB(0, 0, 0));
			defineMarker(SC_MARKNUM_FOLDERSUB, SC_MARK_EMPTY, RGB(0xff, 0xff, 0xff), RGB(0, 0, 0));
			defineMarker(SC_MARKNUM_FOLDERTAIL, SC_MARK_EMPTY, RGB(0xff, 0xff, 0xff), RGB(0, 0, 0));
			defineMarker(SC_MARKNUM_FOLDEREND, SC_MARK_EMPTY, RGB(0xff, 0xff, 0xff), RGB(0, 0, 0));
			defineMarker(SC_MARKNUM_FOLDEROPENMID, SC_MARK_EMPTY, RGB(0xff, 0xff, 0xff), RGB(0, 0, 0));
			defineMarker(SC_MARKNUM_FOLDERMIDTAIL, SC_MARK_EMPTY, RGB(0xff, 0xff, 0xff), RGB(0, 0, 0));
      break;
    case #folding-arrow:            
			defineMarker(SC_MARKNUM_FOLDEROPEN, SC_MARK_ARROWDOWN, RGB(0, 0, 0), RGB(0, 0, 0));
			defineMarker(SC_MARKNUM_FOLDER, SC_MARK_ARROW, RGB(0, 0, 0), RGB(0, 0, 0));
			defineMarker(SC_MARKNUM_FOLDERSUB, SC_MARK_EMPTY, RGB(0, 0, 0), RGB(0, 0, 0));
			defineMarker(SC_MARKNUM_FOLDERTAIL, SC_MARK_EMPTY, RGB(0, 0, 0), RGB(0, 0, 0));
			defineMarker(SC_MARKNUM_FOLDEREND, SC_MARK_EMPTY, RGB(0xff, 0xff, 0xff), RGB(0, 0, 0));
			defineMarker(SC_MARKNUM_FOLDEROPENMID, SC_MARK_EMPTY, RGB(0xff, 0xff, 0xff), RGB(0, 0, 0));
			defineMarker(SC_MARKNUM_FOLDERMIDTAIL, SC_MARK_EMPTY, RGB(0xff, 0xff, 0xff), RGB(0, 0, 0));
      break;
      
  }
 
}
//- Lexer and styles  

//+ Scintilla "primordial" events. 

  // raised when document is getting/loosing "changed" state.
function Scintilla.handleChangedStatus(changed) 
  { 
    this.changed = changed; 
    this.onChangedStatus(changed); 
  }
  // raised when character has been added.
function Scintilla.handleCharAdded(charCode) 
  { 
    this.onCharAdded(charCode);  
  }
  // raised when user attempts to modify RO document.
function Scintilla.handleModifyAttempt() {}
  // double click
function Scintilla.handleDoubleClick( lineNo, position /*from doc start*/, shiftPressed, ctrlPressed, altPressed ) 
{
  this.onDoubleClick(lineNo, position /*from doc start*/, shiftPressed, ctrlPressed, altPressed);  
}
  // something was changed, time to update toolbars, etc.
function Scintilla.handleUpdateUI() 
{
  this.onUpdateUI();
}
  // mofification notification
function Scintilla.handleModified 
  (
    lineNo, // at line
    position, // at char (from doc start)
    modificationType, // see SC_MOD_INSERTTEXT .. SC_MOD_CHANGELINESTATE
    linesAdded,
    foldLevelNow,
    foldLevelPrev
    //text,   // modified text, can be undefined
  ) {}
  // click on margin
function Scintilla.handleMarginClick
  (
    lineNo, // at line
    position, // at char (from doc start)
    marginNo, 
    shiftPressed, ctrlPressed, altPressed 
  ) {}
  // hot spot click, no idea what is a heck that hot spot
function Scintilla.handleHotSpotClick( position /*from doc start*/, shiftPressed, ctrlPressed, altPressed ) {}
  // same thing but twice.
function Scintilla.handleHotSpotDoubleClick( position /*from doc start*/, shiftPressed, ctrlPressed, altPressed ) {}
  // indicator press
function Scintilla.handleIndicatorPress( position /*from doc start*/, shiftPressed, ctrlPressed, altPressed ) {}
  // indicator release
function Scintilla.handleIndicatorRelease( position /*from doc start*/, shiftPressed, ctrlPressed, altPressed ) {}
  // key pressed
function Scintilla.handleKeyPressed( keyCode, shiftPressed, ctrlPressed, altPressed  )
  {
    function eq(v1, v2) { return (v1 == undefined) || (v1 == v2); }
    if(ctrlPressed || altPressed)
    {
      for(var skd in Scintilla.shortcuts)
      {
        if( skd.code == keyCode && 
            eq(skd.ctrl,ctrlPressed) &&
            eq(skd.shift,shiftPressed) &&
            eq(skd.alt,altPressed)) 
            {
              var handler = this[skd.handler];
              return typeof handler == #function && handler.call(this);
            }
      }
      return this.onShortcutKey(keyCode, shiftPressed, ctrlPressed, altPressed);
    }
  }
  // on context menu called, return true if you will handle it on your side
function Scintilla.handleContextMenu( position, x,y ) 
  {
    var cmenu = this.select("menu.context");
    if( cmenu )
    {
      this.prepareContextMenu(cmenu, position);
      this.popup(cmenu, x, y);
      return true;
    }
  }
   
//- Scintilla "primordial" events.



